<?php

namespace WorkOfStan\Backyard\Test;

use WorkOfStan\Backyard\BackyardArray;
use WorkOfStan\Backyard\BackyardError;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-25 at 18:56:11.
 */
class BackyardArrayTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var BackyardArray
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        error_reporting(E_ALL); // incl E_NOTICE
        $this->object = new BackyardArray(new BackyardError());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        // no action
    }

    /**
     * @covers WorkOfStan\Backyard\BackyardArray::inArrayWildcards
     */
    public function testInArrayWildcards()
    {
        $orig = array('*krapplack.de');
        $this->assertTrue($this->object->inArrayWildcards('www.krapplack.de', $orig));
        $this->assertFalse($this->object->inArrayWildcards('www.qrapplack.de', $orig));
    }

    /**
     * @covers WorkOfStan\Backyard\BackyardArray::getOneColumnFromArray
     *
     * testGetOneColumnFromArrayNotArray not needed as the Argument 1 MUST be of the type array
     */
//    public function testGetOneColumnFromArrayNotArray()
//    {
//        $myArray = 1;
//        $columnName = "b";
//        $columnAlwaysExpected = false;
//        $expected = array();
//
//        $this->assertEquals($expected,
//                            $this->object->getOneColumnFromArray($myArray, $columnName, $columnAlwaysExpected));
//    }

    /**
     * @covers WorkOfStan\Backyard\BackyardArray::getOneColumnFromArray
     *
     * Logs something like: Warning: -2020 14:09:35] [warning] [0] [/tmp/vendor/bin/phpunit] [anonymous@-] [0] [-]
     *     getOneColumnFromArray: b not in Array
     */
    public function testGetOneColumnFromArrayMissingRowIgnored()
    {
        $myArray = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",),
            "a" => array("a" => "1000", "b" => "2000", "c" => "3000",),
        );
        $columnName = "b";
        $columnAlwaysExpected = false;
        $expected = array("al" => "2", "ham" => "20", "a" => "2000");

        $this->assertEquals(
            $expected,
            $this->object->getOneColumnFromArray($myArray, $columnName, $columnAlwaysExpected)
        );
    }

    public function testGetOneColumnFromArrayMissingRowLogged()
    {
        $myArray = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",),
            "a" => array("a" => "1000", "b" => "2000", "c" => "3000",),
        );
        $columnName = "b";
        $columnAlwaysExpected = true;
        $expected = array("al" => "2", "ham" => "20", "a" => "2000");

        $this->assertEquals(
            $expected,
            $this->object->getOneColumnFromArray(
                $myArray,
                $columnName,
                $columnAlwaysExpected
            )
        );
        //@todo automatically check that missing "br" got logged
    }

    /**
     * @covers WorkOfStan\Backyard\BackyardArray::removeOneColumnFromArray
     *
     * testRemoveOneColumnFromArrayNoArray() not needed as the Argument 1 MUST be of the type array
     */
//    public function testRemoveOneColumnFromArrayNoArray()
//    {
//        $myArray = 1;
//        $columnName = "b";
//        $expected = array();
//
//        $this->assertEquals($expected, $this->object->removeOneColumnFromArray($myArray, $columnName));
//    }
    public function testRemoveOneColumnFromArray()
    {
        $myArray = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",),
            "a" => array("a" => "1000", "b" => "2000", "c" => "3000",),
        );
        $columnName = "b";
        $expected = array(
            "al" => array("a" => "1", "c" => "3",),
            "ham" => array("a" => "10", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",),
            "a" => array("a" => "1000", "c" => "3000",),
        );

        $this->assertEquals($expected, $this->object->removeOneColumnFromArray($myArray, $columnName));
    }

    /**
     * @covers WorkOfStan\Backyard\BackyardArray::dumpArrayAsOneLine
     */
    public function testDumpArrayAsOneLine()
    {
        $myArray = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",),
            "a" => array("a" => "1000", "b" => "2000", "c" => "3000",),
        );
        $expected = 'Array ( [al] => Array ( [a] => 1 [b] => 2 [c] => 3 ) '
            . '[ham] => Array ( [a] => 10 [b] => 20 [c] => 30 ) [br] => Array ( [a] => 100 [c] => 300 ) '
            . '[a] => Array ( [a] => 1000 [b] => 2000 [c] => 3000 ) ) ';

        $this->assertEquals($expected, $this->object->dumpArrayAsOneLine($myArray));
    }

    /**
     * @covers WorkOfStan\Backyard\BackyardArray::arrayVlookup
     */
    public function testArrayVlookupNoMatch()
    {
        $searchedArray = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",),
            "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
        );
        $searchedValue = "2000";
        $columnName = "b";
        $allExactMatches = false;
        $columnAlwaysExpected = false;
        $expected = false;

        $this->assertEquals(
            $expected,
            $this->object->arrayVlookup(
                $searchedValue,
                $searchedArray,
                $columnName,
                $allExactMatches,
                $columnAlwaysExpected
            )
        );
    }

    public function testArrayVlookupFirstMatch()
    {
        $searchedArray = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",),
            "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
        );
        $searchedValue = "20";
        $columnName = "b";
        $allExactMatches = false;
        $columnAlwaysExpected = false;
        $expected = array("a" => "10", "b" => "20", "c" => "30",);

        $this->assertEquals(
            $expected,
            $this->object->arrayVlookup(
                $searchedValue,
                $searchedArray,
                $columnName,
                $allExactMatches,
                $columnAlwaysExpected
            )
        );
    }

    public function testArrayVlookupAllMatches()
    {
        $searchedArray = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",),
            "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
        );
        $searchedValue = "20";
        $columnName = "b";
        $allExactMatches = true;
        $columnAlwaysExpected = false;
        $expected = array(
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
        );

        $this->assertEquals(
            $expected,
            $this->object->arrayVlookup(
                $searchedValue,
                $searchedArray,
                $columnName,
                $allExactMatches,
                $columnAlwaysExpected
            )
        );
    }

    /**
     * @covers WorkOfStan\Backyard\BackyardArray::arrayDiffAssocRecursive
     */
    public function testArrayDiffAssocRecursiveDifferent()
    {
        $array1 = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",
                "x" => array(
                    "al" => array("a" => "1", "b" => "2", "c" => "3",),
                    "ham" => array("a" => "10", "b" => "20", "c" => "30",),
                    "br" => array("a" => "100", "c" => "300",),
                    "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
                )
            ),
            "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
        );
        $array2 = array(
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
        );
        $expected = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "br" => array("a" => "100", "c" => "300",
                "x" => array(
                    "al" => array("a" => "1", "b" => "2", "c" => "3",),
                    "ham" => array("a" => "10", "b" => "20", "c" => "30",),
                    "br" => array("a" => "100", "c" => "300",),
                    "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
                )
            ),
        );

        $this->assertEquals($expected, $this->object->arrayDiffAssocRecursive($array1, $array2));
    }

    public function testArrayDiffAssocRecursiveSame()
    {
        $array1 = array(
            "al" => array("a" => "1", "b" => "2", "c" => "3",),
            "ham" => array("a" => "10", "b" => "20", "c" => "30",),
            "br" => array("a" => "100", "c" => "300",
                "x" => array(
                    "al" => array("a" => "1", "b" => "2", "c" => "3",),
                    "ham" => array("a" => "10", "b" => "20", "c" => "30",),
                    "br" => array("a" => "100", "c" => "300",),
                    "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
                )
            ),
            "a" => array("a" => "1000", "b" => "20", "c" => "3000",),
        );
        $expected = 0;

        $this->assertEquals($expected, $this->object->arrayDiffAssocRecursive($array1, $array1));
    }
}
